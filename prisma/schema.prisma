generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pet_type {
  id              Int               @id @default(autoincrement())
  pet_type_name   String            @unique @db.VarChar(100)
  pets            pet[]
  sitter_pet_type sitter_pet_type[]
}

model role {
  id        Int         @id @default(autoincrement())
  role_name String      @db.VarChar(50)
  user_role user_role[]
}

model sitter {
  id                      Int                       @id @default(autoincrement())
  user_sitter_id          Int
  name                    String?                   @db.VarChar(100)
  location_description    String?                   @db.VarChar(255)
  phone                   String?                   @db.VarChar(20)
  introduction            String?
  address_detail          String?
  address_province        String?                   @db.VarChar(100)
  address_district        String?                   @db.VarChar(100)
  address_sub_district    String?                   @db.VarChar(100)
  address_post_code       String?                   @db.VarChar(10)
  base_price              Decimal?                  @db.Decimal(10, 2)
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @db.Timestamp(6)
  experience              Int?
  service_description     String?                   @db.VarChar(1000)
  approval_status_id      Int                       @default(1)
  status_updated_at       DateTime?                 @db.Timestamp(6)
  admin_note              String?                   @db.VarChar(1000)
  latitude                Float?
  longitude               Float?
  booking                 booking[]
  reviews                 review[]
  sitter_approval_status  sitter_approval_status    @relation(fields: [approval_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                    user                      @relation(fields: [user_sitter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sitter_approval_history sitter_approval_history[]
  sitter_image            sitter_image[]
  sitter_pet_type         sitter_pet_type[]
}

model sitter_image {
  id        Int    @id @default(autoincrement())
  sitter_id Int
  image_url String @db.VarChar(255)
  sitter    sitter @relation(fields: [sitter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model user {
  id                       Int                       @id @default(autoincrement())
  name                     String?                   @db.VarChar(100)
  email                    String                    @unique @db.VarChar(100)
  password                 String                    @db.VarChar(255)
  phone                    String?                   @db.VarChar(20)
  profile_image            String?                   @db.VarChar(255)
  dob                      DateTime?                 @db.Date
  bank_name                String?                   @db.VarChar(100)
  bank_number              String?                   @db.VarChar(50)
  created_at               DateTime                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                 @db.Timestamp(6)
  profile_image_public_id  String?                   @db.VarChar(255)
  status                   user_status               @default(normal)
  approval_status_id       Int                       @default(1)
  status_updated_at        DateTime?                 @db.Timestamp(6)
  admin_note               String?                   @db.VarChar(1000)
  suspended_at             DateTime?                 @db.Timestamp(6)
  suspended_by_admin_id    Int?
  suspend_reason           String?                   @db.VarChar(1000)
  is_online                Boolean?                  @default(false)
  last_seen                DateTime?                 @default(now()) @db.Timestamp(6)
  admin                    admin?
  chat_chat_user1_idTouser chat[]                    @relation("chat_user1_idTouser")
  chat_chat_user2_idTouser chat[]                    @relation("chat_user2_idTouser")
  message                  message[]
  pets                     pet[]
  report                   report[]
  reviews                  review[]
  sitter                   sitter[]
  sitter_approval_history  sitter_approval_history[]
  sitter_approval_status   sitter_approval_status    @relation(fields: [approval_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_chat_settings       user_chat_settings[]
  user_role                user_role[]

  @@index([approval_status_id], map: "idx_user_approval_status_id")
  @@index([name], map: "idx_user_name")
  @@index([phone], map: "idx_user_phone")
  @@index([status_updated_at], map: "idx_user_status_updated_at")
  @@index([status], map: "idx_user_status")
  @@index([suspended_at], map: "idx_user_suspended_at")
}

model user_role {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  role    role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
}

model sitter_pet_type {
  sitter_id   Int
  pet_type_id Int
  pet_type    pet_type @relation(fields: [pet_type_id], references: [id], onDelete: Cascade)
  sitter      sitter   @relation(fields: [sitter_id], references: [id], onDelete: Cascade)

  @@id([sitter_id, pet_type_id])
}

model review {
  id         Int      @id @default(autoincrement())
  sitter_id  Int
  user_id    Int
  rating     Int
  comment    String?  @db.VarChar(500)
  created_at DateTime @default(now())
  sitter     sitter   @relation(fields: [sitter_id], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model pet {
  id                 Int                  @id @default(autoincrement())
  owner_id           Int
  pet_type_id        Int
  name               String               @db.VarChar(100)
  breed              String               @db.VarChar(100)
  sex                String               @db.VarChar(10)
  age_month          Int
  color              String               @db.VarChar(100)
  weight_kg          Decimal              @db.Decimal(6, 2)
  about              String?              @db.VarChar(1000)
  image_url          String?              @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  image_public_id    String?              @db.VarChar(255)
  is_banned          Boolean?             @default(false)
  banned_at          DateTime?            @db.Timestamp(6)
  banned_by_admin_id Int?
  ban_reason         String?              @db.VarChar(1000)
  booking_pet_detail booking_pet_detail[]
  owner              user                 @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pet_type           pet_type             @relation(fields: [pet_type_id], references: [id], onUpdate: NoAction)

  @@index([name], map: "idx_pet_name")
  @@index([owner_id], map: "idx_pet_owner_id")
  @@index([pet_type_id], map: "idx_pet_pet_type_id")
  @@index([created_at], map: "idx_pet_created_at")
  @@index([is_banned], map: "idx_pet_is_banned")
}

model admin {
  id                       Int                       @id @default(autoincrement())
  user_id                  Int                       @unique
  is_active                Boolean                   @default(true)
  created_at               DateTime                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  user                     user                      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  report                   report[]
  approval_history_actions sitter_approval_history[] @relation("ApprovalHistoryAdmin")
}

model sitter_approval_status {
  id          Int      @id @default(autoincrement())
  status_name String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  sitters     sitter[]
  user        user[]
}

model sitter_approval_history {
  id         Int      @id @default(autoincrement())
  sitter_id  Int?
  status_id  Int
  admin_id   Int?
  admin_note String?  @db.VarChar(1000)
  changed_at DateTime @default(now()) @db.Timestamp(6)
  user_id    Int?
  admin      admin?   @relation("ApprovalHistoryAdmin", fields: [admin_id], references: [id])
  sitter     sitter?  @relation(fields: [sitter_id], references: [id], onDelete: Cascade)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_approval_history_user")
}

model report {
  id                  Int           @id @default(autoincrement())
  reporter_id         Int
  handled_by_admin_id Int?
  status              report_status @default(new)
  title               String        @db.VarChar(150)
  description         String?       @db.VarChar(2000)
  attachments_json    Json?
  admin_note          String?       @db.VarChar(1000)
  created_at          DateTime      @default(now()) @db.Timestamp(6)
  updated_at          DateTime?     @db.Timestamp(6)
  admin               admin?        @relation(fields: [handled_by_admin_id], references: [id], onUpdate: NoAction, map: "fk_report_admin")
  user                user          @relation(fields: [reporter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_user")

  @@index([created_at], map: "idx_report_created_at")
  @@index([reporter_id], map: "idx_report_reporter")
  @@index([status], map: "idx_report_status")
  @@index([handled_by_admin_id], map: "idx_report_handled_admin")
  @@index([status, created_at(sort: Desc)], map: "idx_report_status_created")
}

model chat {
  id                                    Int                  @id @default(autoincrement())
  user1_id                              Int
  user2_id                              Int
  last_message_id                       Int?                 @unique
  updated_at                            DateTime?            @default(now()) @db.Timestamp(6)
  message_chat_last_message_idTomessage message?             @relation("chat_last_message_idTomessage", fields: [last_message_id], references: [id], onUpdate: NoAction, map: "chat_last_message_fkey")
  user_chat_user1_idTouser              user                 @relation("chat_user1_idTouser", fields: [user1_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_user1_fkey")
  user_chat_user2_idTouser              user                 @relation("chat_user2_idTouser", fields: [user2_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_user2_fkey")
  message_message_chat_idTochat         message[]            @relation("message_chat_idTochat")
  user_chat_settings                    user_chat_settings[]

  @@unique([user1_id, user2_id], map: "chat_users_unique")
  @@index([updated_at(sort: Desc)], map: "idx_chat_updated_at")
  @@index([user1_id, user2_id], map: "idx_chat_user1_user2")
}

model message {
  id                                 Int       @id @default(autoincrement())
  chat_id                            Int
  sender_id                          Int
  message_type                       String?   @default("TEXT") @db.VarChar(10)
  content                            String?
  image_url                          String?   @db.VarChar(255)
  timestamp                          DateTime? @default(now()) @db.Timestamp(6)
  is_read                            Boolean?  @default(false)
  chat_chat_last_message_idTomessage chat?     @relation("chat_last_message_idTomessage")
  chat_message_chat_idTochat         chat      @relation("message_chat_idTochat", fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_chat_fkey")
  user                               user      @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_sender_fkey")

  @@index([chat_id], map: "idx_message_chat_id")
  @@index([chat_id, timestamp(sort: Desc)], map: "idx_message_chat_timestamp")
  @@index([sender_id], map: "idx_message_sender_id")
  @@index([timestamp(sort: Desc)], map: "idx_message_timestamp")
}

model user_chat_settings {
  id           Int      @id @default(autoincrement())
  user_id      Int
  chat_id      Int
  is_hidden    Boolean? @default(false)
  unread_count Int?     @default(0)
  chat         chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_chat_settings_chat_fkey")
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_chat_settings_user_fkey")

  @@unique([user_id, chat_id], map: "user_chat_settings_unique")
  @@index([chat_id], map: "idx_user_chat_settings_chat_id")
  @@index([user_id], map: "idx_user_chat_settings_user_id")
}

model booking {
  id                                    Int                  @id @default(autoincrement())
  name                                  String               @db.VarChar
  email                                 String               @db.VarChar
  phone                                 String               @db.VarChar
  additional                            String?              @db.VarChar
  date_start                            DateTime             @db.Timestamp(6)
  date_end                              DateTime             @db.Timestamp(6)
  pet_sitter_id                         Int
  user_id                               Int
  payment_id                            Int?
  payment_date                          DateTime?            @db.Timestamp(6)
  booking_status                        Int
  amount                                Decimal              @db.Decimal(10, 2)
  created_at                            DateTime             @default(now()) @db.Timestamp(6)
  updated_at                            DateTime             @default(now()) @db.Timestamp(6)
  status_booking_booking_statusTostatus status               @relation("booking_booking_statusTostatus", fields: [booking_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_status")
  status_booking_payment_idTostatus     status?              @relation("booking_payment_idTostatus", fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_id")
  sitter                                sitter               @relation(fields: [pet_sitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pet_sitter_id")
  booking                               booking              @relation("bookingTobooking", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id ")
  other_booking                         booking[]            @relation("bookingTobooking")
  booking_pet_detail                    booking_pet_detail[]

  @@index([date_start, date_end], map: "idx_booking_dates")
  @@index([pet_sitter_id], map: "idx_booking_pet_sitter")
  @@index([booking_status], map: "idx_booking_status")
  @@index([user_id], map: "idx_booking_user")
}

model booking_pet_detail {
  id            Int     @id @default(autoincrement())
  booking_id    Int
  pet_detail_id Int
  booking       booking @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "booking_id")
  pet           pet     @relation(fields: [pet_detail_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pet_detail_id")

  @@index([booking_id], map: "idx_booking_pet_detail_booking")
  @@index([pet_detail_id], map: "idx_booking_pet_detail_pet")
}

model status {
  id                                     Int       @id @default(autoincrement())
  name                                   String    @db.VarChar
  type                                   String    @db.VarChar
  booking_booking_booking_statusTostatus booking[] @relation("booking_booking_statusTostatus")
  booking_booking_payment_idTostatus     booking[] @relation("booking_payment_idTostatus")
}

enum report_status {
  new
  pending
  resolved
  canceled
}

enum user_status {
  normal
  ban
}
