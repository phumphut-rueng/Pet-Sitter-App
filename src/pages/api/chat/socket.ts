// file: pages/api/chat/socket.ts

import { Server } from 'socket.io';
import { NextApiRequest, NextApiResponse } from 'next';
import { Socket } from 'socket.io';
import { prisma } from '@/lib/prisma/prisma';
import { SocketEvents, SendMessageData, MessagePayload, UnreadUpdateData } from '@/types/socket.types';

// Use any type for socket server to avoid type conflicts
type NextApiResponseWithSocket = NextApiResponse & {
  socket: {
    server: any;
  } | null;
};

export const config = { 
  api: { 
    bodyParser: false 
  } 
};

let io: Server; // Global Instance

interface SocketWithUser extends Socket {
  userId?: string;
  currentChatId?: number;
}

export default async function socketHandler(req: NextApiRequest, res: NextApiResponseWithSocket) {
  if (!res.socket?.server?.io) {
    // ‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Socket.io Server Instance ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (Magic Part)
    // SocketLoading ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏°‡∏∑‡πà‡∏≠ !res.socket?.server?.io === true)
    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ instance ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å
    console.log('üöÄ Creating Socket.io Server Instance for the first time...');
    const httpServer = res.socket!.server;
    io = new Server(httpServer, { 
      path: '/api/chat/socket', 
      cors: { 
        origin: '*', 
        methods: ['GET', 'POST'] 
      },
      pingTimeout: 60000, // 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      pingInterval: 25000, // 25 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      upgradeTimeout: 10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      allowEIO3: true
    });

    io.on('connection', (socket: SocketWithUser) => {
      console.log('New socket connection established');
      
      // Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ
      socket.on('join_app', async (userId: string) => {
        try {
          console.log('User joining app:', userId);
          (socket as SocketWithUser).userId = userId;
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          const userIdNumber = parseInt(userId);
          if (isNaN(userIdNumber)) {
            console.error('Invalid user ID:', userId);
            socket.emit('error', { message: 'Invalid user ID' });
            return;
          }
          
          await prisma.user.update({ 
            where: { id: userIdNumber }, 
            data: { is_online: true } 
          });
          socket.join(userId); // ‡πÄ‡∏Ç‡πâ‡∏≤ Private Room ‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          
          // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ client
          const onlineUsers = await prisma.user.findMany({
            where: { is_online: true },
            select: { id: true },
          });
          
          const onlineUserIds = onlineUsers.map(user => user.id.toString());
          
          // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ online users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ client ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
          socket.emit('online_users_list', onlineUserIds);
          
          // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
          io.emit('user_online', userId);
          console.log('User successfully joined app:', userId);
        } catch (error) {
          console.error('Error joining app:', error);
          socket.emit('error', { message: 'Failed to join app' });
        }
      });
      
      // Event: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      socket.on('send_message', async (data: SendMessageData) => {
        try {
          // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏•‡∏á‡πÉ‡∏ô DB (Persistence)
          const newMessage = await prisma.message.create({
            data: {
              chat_id: data.chatId,
              sender_id: parseInt(data.senderId),
              content: data.content,
              message_type: data.messageType || 'TEXT',
              image_url: data.imageUrl,
            },
          });

          // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Chat ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          await prisma.chat.update({ 
            where: { id: data.chatId }, 
            data: { 
              last_message_id: newMessage.id, 
              updated_at: new Date() 
            } 
          });
          
          // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ receiver ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π chat ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const receiverSocket = Array.from(io.sockets.sockets.values()).find(
            socket => (socket as SocketWithUser).userId === data.receiverId
          ) as SocketWithUser;
          const isReceiverViewingThisChat = receiverSocket?.currentChatId === data.chatId;
          
          
          // 4. INCREMENT UNREAD COUNT ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á chat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏≠‡∏¢‡∏π‡πà)
          const updatedUserChatSettings = await prisma.user_chat_settings.update({
            where: { 
              user_id_chat_id: { 
                user_id: parseInt(data.receiverId), 
                chat_id: data.chatId 
              } 
            },
            data: { 
              unread_count: isReceiverViewingThisChat 
                ? { set: 0 } // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ set ‡πÄ‡∏õ‡πá‡∏ô 0
                : { increment: 1 }, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏π ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 1
              is_hidden: false // ‡πÅ‡∏™‡∏î‡∏á chat ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å
            },
            select: { unread_count: true }
          });
          
          // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡πÉ‡∏ô payload
          const sender = await prisma.user.findUnique({
            where: { id: parseInt(data.senderId) },
            select: { 
              name: true,
              profile_image: true,
              profile_image_public_id: true
            }
          });
          
          // 5. Real-Time Delivery ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á Unread Badge
          const payload: MessagePayload = { 
            id: newMessage.id.toString(),
            chatId: newMessage.chat_id,
            senderId: newMessage.sender_id.toString(),
            content: newMessage.content || '',
            messageType: newMessage.message_type || 'TEXT',
            imageUrl: newMessage.image_url || undefined,
            timestamp: newMessage.timestamp || new Date(),
            isRead: newMessage.is_read || false,
            senderName: sender?.name || 'Unknown User',
            senderProfileImage: sender?.profile_image || undefined,
            senderProfileImagePublicId: sender?.profile_image_public_id || undefined
          };
          
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö
          io.to(data.senderId).emit('receive_message', payload);
          io.to(data.receiverId).emit('receive_message', payload);
          
          // ‡∏™‡πà‡∏á unread update ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö
          io.to(data.senderId).emit('unread_update', { 
            chatId: data.chatId, 
            newUnreadCount: 0 // ‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ unread count
          });
          
          // ‡πÉ‡∏ä‡πâ unread count ‡∏à‡∏≤‡∏Å database (‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß)
          const unreadCountForReceiver = updatedUserChatSettings.unread_count || 0;
          
          // ‡∏™‡πà‡∏á unread update ‡πÉ‡∏´‡πâ receiver ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ navbar ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
          io.to(data.receiverId).emit('unread_update', { 
            chatId: data.chatId, 
            newUnreadCount: unreadCountForReceiver
          });

          // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ frontend refresh chat list (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà chat ‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ)
          io.to(data.receiverId).emit('chat_list_update', {
            chatId: data.chatId,
            action: 'show' // ‡πÅ‡∏™‡∏î‡∏á chat ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
          });
        } catch (error) {
          console.error('Error sending message:', error);
        }
      });

      // Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å chat ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        socket.on('set_current_chat', (data: { userId: string; chatId: number }) => {
          (socket as SocketWithUser).currentChatId = data.chatId;
        });

      // Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ
      socket.on('disconnect', async () => {
        try {
          if ((socket as SocketWithUser).userId) {
            await prisma.user.update({ 
              where: { id: parseInt((socket as SocketWithUser).userId!) }, 
              data: { 
                is_online: false, 
                last_seen: new Date() 
              } 
            });
            io.emit('user_offline', (socket as SocketWithUser).userId);
          }
        } catch (error) {
          console.error('Error handling disconnect:', error);
        }
      });
    });
    res.socket!.server.io = io;
    console.log('‚úÖ Socket.io Server Instance created successfully!');
  } else {
    console.log('‚ôªÔ∏è Socket.io Server Instance already exists, reusing...');
  }
  res.status(200).end();
}