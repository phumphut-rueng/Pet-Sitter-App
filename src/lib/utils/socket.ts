// file: utils/socket.ts

import { io, Socket } from 'socket.io-client';
import { SocketEvents, SendMessageData } from '@/types/socket.types';
import axios from 'axios';

let socket: Socket<SocketEvents> | null = null;
let isSocketServerReady = false;
let socketConnectionPromise: Promise<Socket<SocketEvents>> | null = null;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ socket server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const checkSocketServerReady = async (): Promise<boolean> => {
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤ ready ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return true ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (isSocketServerReady) {
    return true;
  }
  
  try {
    const socketServerUrl = process.env.NEXT_PUBLIC_SOCKET_SERVER_URL || 'https://pet-sitter-socket-server-production.up.railway.app';
    const response = await axios.get(`${socketServerUrl}/socket-status`, {
      timeout: 3000, // ‡∏ï‡∏±‡πâ‡∏á timeout ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô
    });
    
    if (response.status === 200 && response.data.isReady) {
      isSocketServerReady = true;
      return true;
    }
    return false;
  } catch (error) {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    // console.log('Socket server not available, continuing without real-time features');
    return false;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠ socket server ‡∏û‡∏£‡πâ‡∏≠‡∏°
export const waitForSocketServer = async (maxAttempts: number = 3, delayMs: number = 1000): Promise<boolean> => {
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    if (await checkSocketServerReady()) {
      return true;
    }
    
    if (attempt < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
  }
  
  // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  // console.log('Socket server not available, continuing without real-time features');
  return false;
};

export const connectSocket = (userId: string): Socket<SocketEvents> | null => {
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ socket ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ return socket ‡πÄ‡∏î‡∏¥‡∏°
  if (socket && socket.connected) {
    return socket;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ connection promise ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return socket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  if (socketConnectionPromise && socket) {
    return socket;
  }

  // Get Socket.IO server URL from environment variable
  const socketServerUrl = process.env.NEXT_PUBLIC_SOCKET_SERVER_URL || 'https://pet-sitter-socket-server-production.up.railway.app';
  
  const socketConfig = {
    path: '/socket.io', // Default Socket.IO path
    autoConnect: false, // ‡∏õ‡∏¥‡∏î auto connect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    forceNew: true, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà
    timeout: 5000, // ‡∏•‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    reconnection: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ reconnect ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ã‡πâ‡∏≥‡πÜ
    transports: ['polling'], // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ polling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    withCredentials: true // ‡∏™‡πà‡∏á credentials
  };

  // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  // console.log(`üîå Connecting to Socket.IO server: ${socketServerUrl}`);
  socket = io(socketServerUrl, socketConfig);

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
  socket.connect();

  socket.on('connect', () => {
    socket?.emit('join_app', userId); // ‡∏™‡πà‡∏á ID ‡πÑ‡∏õ‡πÉ‡∏´‡πâ Server ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Private Room ‡πÅ‡∏•‡∏∞ Presence
  });

  socket.on('connect_error', (error) => {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    // console.log('Socket connection not available, continuing without real-time features');
    
    // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á frontend ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console)
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('socket:connection_error', { detail: error }));
    }
  });

  socket.on('disconnect', () => {
    // Socket disconnected
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-Time Events
  socket.on('unread_update', (data) => {
    window.dispatchEvent(new CustomEvent('socket:unread_update', { detail: data }));
  });

  socket.on('receive_message', (message) => {
    window.dispatchEvent(new CustomEvent('socket:receive_message', { detail: message }));
  });

  socket.on('user_online', (userId) => {
    window.dispatchEvent(new CustomEvent('socket:user_online', { detail: userId }));
  });

  socket.on('user_offline', (userId) => {
    window.dispatchEvent(new CustomEvent('socket:user_offline', { detail: userId }));
  });

  socket.on('online_users_list', (onlineUsers) => {
    window.dispatchEvent(new CustomEvent('socket:online_users_list', { detail: onlineUsers }));
  });

  socket.on('chat_list_update', (data) => {
    window.dispatchEvent(new CustomEvent('socket:chat_list_update', { detail: data }));
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° error handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å server
  (socket as Socket & { on: (event: string, callback: (...args: unknown[]) => void) => void }).on('error', (error: Error) => {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('socket:server_error', { detail: error }));
    }
  });

  return socket;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
export const sendMessage = (data: SendMessageData): void => {
  if (socket && socket.connected) {
    socket.emit('send_message', data);
  } else {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    // console.log('Socket not connected. Message will be sent when connection is available.');
  }
};

export const disconnectSocket = (): void => {
  if (socket) {
    socket.disconnect();
    socket = null;
  }
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï global state ‡πÄ‡∏°‡∏∑‡πà‡∏≠ disconnect
  isSocketServerReady = false;
  socketConnectionPromise = null;
  
  // ‡∏•‡∏ö socket state ‡∏à‡∏≤‡∏Å localStorage
  if (typeof window !== 'undefined') {
    try {
      localStorage.removeItem('socket-state');
    } catch {
      // Ignore localStorage errors
    }
  }
};

export const getSocket = (): Socket<SocketEvents> | null => {
  return socket;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ visibility change (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
export const handleVisibilityChange = () => {
  if (document.visibilityState === 'visible') {
    if (socket && !socket.connected) {
      socket.connect();
    }
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô visibility change listener
export const initVisibilityListener = () => {
  document.addEventListener('visibilitychange', handleVisibilityChange);
  
  // Cleanup function
  return () => {
    document.removeEventListener('visibilitychange', handleVisibilityChange);
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ socket ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const isSocketAvailable = (): boolean => {
  return socket !== null && socket.connected;
};

