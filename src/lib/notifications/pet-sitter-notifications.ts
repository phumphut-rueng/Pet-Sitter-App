import { createNotification } from '@/pages/api/notifications/create';

/**
 * üîî Pet Sitter App - Essential Notifications
 * 
 * ‡∏£‡∏∞‡∏ö‡∏ö notification ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pet Sitter App
 * ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å user journey ‡πÅ‡∏•‡∏∞ business logic
 */

// ===== BOOKING NOTIFICATIONS =====

/**
 * ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á sitter
 */
export async function notifyNewBooking(sitterId: number, customerName: string, petNames: string[], bookingDate: string) {
  return await createNotification({
    userId: sitterId,
    type: 'booking',
    title: 'New Booking Request! üêï',
    message: `${customerName} wants to book pet sitting for ${petNames.join(', ')} on ${bookingDate}`,
  });
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyBookingConfirmed(customerId: number, sitterName: string, bookingDate: string) {
  return await createNotification({
    userId: customerId,
    type: 'booking',
    title: 'Booking Confirmed! üéâ',
    message: `Your booking with ${sitterName} on ${bookingDate} has been confirmed`,
  });
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyBookingCancelled(customerId: number, sitterName: string, reason?: string) {
  return await createNotification({
    userId: customerId,
    type: 'booking',
    title: 'Booking Cancelled ‚ùå',
    message: `Your booking with ${sitterName} has been cancelled${reason ? `. Reason: ${reason}` : ''}`,
  });
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyBookingCompleted(customerId: number, sitterName: string) {
  return await createNotification({
    userId: customerId,
    type: 'booking',
    title: 'Service Completed! ‚úÖ',
    message: `Your pet sitting service with ${sitterName} has been completed. Please leave a review!`,
  });
}

// ===== PAYMENT NOTIFICATIONS =====

/**
 * ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyPaymentSuccess(customerId: number, amount: number, bookingDate: string) {
  console.log('Creating payment notification with type: payment');
  const result = await createNotification({
    userId: customerId,
    type: 'payment',
    title: 'Payment Successful! üí≥',
    message: `Payment of ‡∏ø${amount} for booking on ${bookingDate} has been processed successfully`,
  });
  console.log('Payment notification result:', result);
  return result;
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyPaymentFailed(customerId: number, amount: number) {
  return await createNotification({
    userId: customerId,
    type: 'system',
    title: 'Payment Failed ‚ùå',
    message: `Payment of ‡∏ø${amount} could not be processed. Please try again or contact support.`,
  });
}

// ===== CHAT NOTIFICATIONS =====

/**
 * ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
 */
export async function notifyNewMessage(receiverId: number, senderName: string, messagePreview: string) {
  return await createNotification({
    userId: receiverId,
    type: 'message',
    title: `New Message from ${senderName} üí¨`,
    message: messagePreview.length > 50 ? `${messagePreview.substring(0, 50)}...` : messagePreview,
  });
}

// ===== REVIEW NOTIFICATIONS =====

/**
 * ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á sitter
 */
export async function notifyNewReview(sitterUserId: number, customerName: string, rating: number) {
  const stars = '‚≠ê'.repeat(rating);
  return await createNotification({
    userId: sitterUserId,
    type: 'system',
    title: 'New Review Received! üåü',
    message: `${customerName} left you a ${rating}-star review: ${stars}`,
  });
}

/**
 * ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyReviewResponse(customerId: number, sitterName: string) {
  return await createNotification({
    userId: customerId,
    type: 'system',
    title: 'Review Response üí¨',
    message: `${sitterName} has responded to your review`,
  });
}

// ===== ADMIN NOTIFICATIONS =====

/**
 * ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyAccountBanned(userId: number, reason: string, adminName: string) {
  return await createNotification({
    userId,
    type: 'admin',
    title: 'Account Suspended ‚ö†Ô∏è',
    message: `Your account has been suspended by ${adminName}. Reason: ${reason}`,
  });
}

/**
 * ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyAccountUnbanned(userId: number, adminName: string) {
  return await createNotification({
    userId,
    type: 'admin',
    title: 'Account Restored ‚úÖ',
    message: `Your account has been restored by ${adminName}. You can now use our services again.`,
  });
}

/**
 * Pet ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô - ‡πÅ‡∏à‡πâ‡∏á owner
 */
export async function notifyPetBanned(ownerId: number, petName: string, reason: string) {
  return await createNotification({
    userId: ownerId,
    type: 'admin',
    title: 'Pet Profile Suspended üêæ‚ö†Ô∏è',
    message: `Your pet "${petName}" profile has been suspended. Reason: ${reason}`,
  });
}

// ===== SYSTEM NOTIFICATIONS =====

/**
 * ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö - ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
 */
export async function notifySystemUpdate(userId: number, updateTitle: string, updateMessage: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: `System Update: ${updateTitle} üîÑ`,
    message: updateMessage,
  });
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö - ‡πÅ‡∏à‡πâ‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
 */
export async function notifyMaintenance(userId: number, maintenanceDate: string, duration: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: 'Scheduled Maintenance üîß',
    message: `System maintenance scheduled for ${maintenanceDate}. Expected downtime: ${duration}`,
  });
}

// ===== SECURITY NOTIFICATIONS =====

/**
 * ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyNewDeviceLogin(userId: number, deviceInfo: string, location: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: 'New Device Login üîê',
    message: `Your account was accessed from ${deviceInfo} in ${location}. If this wasn't you, please secure your account.`,
  });
}

/**
 * ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyPasswordChanged(userId: number) {
  return await createNotification({
    userId,
    type: 'system',
    title: 'Password Changed üîë',
    message: 'Your password has been successfully changed. If you did not make this change, please contact support immediately.',
  });
}

// ===== PROMOTIONAL NOTIFICATIONS =====

/**
 * ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyPromotion(userId: number, promotionTitle: string, discount: string, validUntil: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: `Special Offer: ${promotionTitle} üéâ`,
    message: `Get ${discount} off your next booking! Valid until ${validUntil}`,
  });
}

/**
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏à‡πâ‡∏á user
 */
export async function notifyNewFeature(userId: number, featureName: string, featureDescription: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: `New Feature: ${featureName} ‚ú®`,
    message: featureDescription,
  });
}

// ===== REMINDER NOTIFICATIONS =====

/**
 * ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyBookingReminder(customerId: number, sitterName: string, bookingDate: string, timeUntil: string) {
  return await createNotification({
    userId: customerId,
    type: 'booking',
    title: 'Booking Reminder ‚è∞',
    message: `Your booking with ${sitterName} on ${bookingDate} is ${timeUntil}. Please prepare your pet!`,
  });
}

/**
 * ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß - ‡πÅ‡∏à‡πâ‡∏á customer
 */
export async function notifyReviewReminder(customerId: number, sitterName: string, daysSince: number) {
  return await createNotification({
    userId: customerId,
    type: 'system',
    title: 'Please Leave a Review ‚≠ê',
    message: `How was your experience with ${sitterName}? It's been ${daysSince} days since your service.`,
  });
}

/**
 * Pet Registration - ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° pet ‡πÉ‡∏´‡∏°‡πà
 */
export async function notifyPetRegistration(userId: number, petName: string, petType: string) {
  return await createNotification({
    userId,
    type: 'system',
    title: 'Pet Added Successfully! üêæ',
    message: `Your pet "${petName}" (${petType}) has been added to your profile.`,
  });
}

/**
 * Profile Update - ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï profile
 */
export async function notifyProfileUpdate(userId: number) {
  return await createNotification({
    userId,
    type: 'system',
    title: 'Profile Updated! üë§',
    message: 'Your profile information has been successfully updated.',
  });
}

/**
 * Pet Ban - ‡πÅ‡∏à‡πâ‡∏á owner ‡πÄ‡∏°‡∏∑‡πà‡∏≠ pet ‡∏ñ‡∏π‡∏Å ban
 */
export async function notifyPetBan(userId: number, petName: string, reason?: string) {
  return await createNotification({
    userId,
    type: 'admin',
    title: `Pet "${petName}" Banned üö´`,
    message: `Your pet "${petName}" has been banned. Reason: ${reason || 'Violated policy'}.`,
  });
}

/**
 * Pet Unban - ‡πÅ‡∏à‡πâ‡∏á owner ‡πÄ‡∏°‡∏∑‡πà‡∏≠ pet ‡∏ñ‡∏π‡∏Å unban
 */
export async function notifyPetUnban(userId: number, petName: string) {
  return await createNotification({
    userId,
    type: 'admin',
    title: `Pet "${petName}" Unbanned ‚úÖ`,
    message: `Your pet "${petName}" has been unbanned.`,
  });
}
